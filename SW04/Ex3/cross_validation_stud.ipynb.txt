{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a31c6137-13df-484e-8b27-48ecdb388f4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "from torch.utils.data import DataLoader\n",
    "from torchvision import datasets\n",
    "from torchvision.transforms import ToTensor\n",
    "from torchsummary import summary\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import KFold"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "898da3f7-5704-4292-b656-62cb7e3bffe1",
   "metadata": {},
   "source": [
    "### Loading the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "565fe12c-8ad4-43bb-b6a5-25aeb91ba3c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "training_data = datasets.mnist.FashionMNIST(root=\"data\", train=True, download=True, transform=ToTensor())\n",
    "test_data = datasets.mnist.FashionMNIST(root=\"data\", train=False, download=True, transform=ToTensor())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cab3eb4f-cdfa-4b85-a723-4762e70aa689",
   "metadata": {},
   "source": [
    "### Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "553da531-2d78-40f6-9cd4-9d5320588bfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your favourite MLP model\n",
    "\n",
    "model = ...\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a546f61f-3918-4b11-b31f-e6e22656293a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------\n",
      "        Layer (type)               Output Shape         Param #\n",
      "================================================================\n",
      "           Flatten-1                  [-1, 784]               0\n",
      "            Linear-2                  [-1, 200]         157,000\n",
      "           Sigmoid-3                  [-1, 200]               0\n",
      "            Linear-4                   [-1, 10]           2,010\n",
      "================================================================\n",
      "Total params: 159,010\n",
      "Trainable params: 159,010\n",
      "Non-trainable params: 0\n",
      "----------------------------------------------------------------\n",
      "Input size (MB): 0.00\n",
      "Forward/backward pass size (MB): 0.01\n",
      "Params size (MB): 0.61\n",
      "Estimated Total Size (MB): 0.62\n",
      "----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "summary(model, (1,28,28))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8572d96-38b4-4595-86ae-11c85f5f2083",
   "metadata": {},
   "source": [
    "### Train-Eval over a given number of epochs for a given train/validation loader (4+1 fold)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "935c445a-2859-41b8-a5df-ebd6b78d8496",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_eval(nepochs, model, lr, trainloader, validloader, cost_fn):\n",
    "    cost_hist = []\n",
    "    cost_hist_test = []\n",
    "    acc_hist = []\n",
    "    acc_hist_test = []\n",
    "\n",
    "    optimizer = torch.optim.SGD(model.parameters(), lr=lr)\n",
    "        \n",
    "    for epoch in range(nepochs):\n",
    "\n",
    "        ...\n",
    "        \n",
    "        print(\"Epoch %i: %f, %f, %f, %f\"%(epoch, cost, acc, cost_test, acc_test))\n",
    "        cost_hist.append(cost)\n",
    "        cost_hist_test.append(cost_test)\n",
    "        acc_hist.append(acc)\n",
    "        acc_hist_test.append(acc_test)\n",
    "    return cost_hist, cost_hist_test, acc_hist, acc_hist_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b891cbe6-9b9d-486c-85fb-9462106e9511",
   "metadata": {},
   "source": [
    "### Split Training Data into folds\n",
    "\n",
    "Prepare specific loaders for the 4 training folds and the 1 validation fold\n",
    "\n",
    "Suggestions:\n",
    "* Use sklearns KFold functionality for spliiting into folds.\n",
    "* Use pytorchs subsamplers (torch.utils.data.SubsetRandomSampler) to construct training and validation loaders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a719296d-d9ce-4a77-8591-ac7dbf3b7416",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<torch._C.Generator at 0x7fcdbd1cdbb0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Configuration options\n",
    "nfolds = 5\n",
    "nepochs = 20\n",
    "lr = 0.3\n",
    "batchsize = 64\n",
    "\n",
    "cost_fn = torch.nn.CrossEntropyLoss()\n",
    "results = {}\n",
    "\n",
    "...\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "12d5529f-870f-4178-9f7e-d1a9fdd332bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FOLD 0\n",
      "--------------------------------\n",
      "Epoch 0: 0.009533, 0.816479, 0.005067, 0.908250\n",
      "Epoch 1: 0.004786, 0.911417, 0.004595, 0.913250\n",
      "Epoch 2: 0.004079, 0.924083, 0.003734, 0.931750\n",
      "Epoch 3: 0.003527, 0.934562, 0.003279, 0.940417\n",
      "Epoch 4: 0.003100, 0.942771, 0.002905, 0.947750\n",
      "Epoch 5: 0.002739, 0.949458, 0.002679, 0.949167\n",
      "Epoch 6: 0.002446, 0.953958, 0.002566, 0.951500\n",
      "Epoch 7: 0.002213, 0.959521, 0.002299, 0.956417\n",
      "Epoch 8: 0.002010, 0.963104, 0.002167, 0.959917\n",
      "Epoch 9: 0.001843, 0.965812, 0.002029, 0.962417\n",
      "Epoch 10: 0.001693, 0.968854, 0.001872, 0.964167\n",
      "Epoch 11: 0.001558, 0.971187, 0.001840, 0.966333\n",
      "Epoch 12: 0.001443, 0.973583, 0.001840, 0.963917\n",
      "Epoch 13: 0.001345, 0.976000, 0.001692, 0.968833\n",
      "Epoch 14: 0.001253, 0.977563, 0.001608, 0.969500\n",
      "Epoch 15: 0.001176, 0.978958, 0.001563, 0.970917\n",
      "Epoch 16: 0.001100, 0.980313, 0.001515, 0.970750\n",
      "Epoch 17: 0.001035, 0.982000, 0.001499, 0.971000\n",
      "Epoch 18: 0.000970, 0.983042, 0.001415, 0.972167\n",
      "Epoch 19: 0.000916, 0.984021, 0.001406, 0.972333\n",
      "FOLD 1\n",
      "--------------------------------\n",
      "Epoch 0: 0.009479, 0.817625, 0.005532, 0.898167\n",
      "Epoch 1: 0.004736, 0.910917, 0.004570, 0.917833\n",
      "Epoch 2: 0.004060, 0.924542, 0.004251, 0.921417\n",
      "Epoch 3: 0.003545, 0.933312, 0.003604, 0.934250\n",
      "Epoch 4: 0.003105, 0.943083, 0.003350, 0.937250\n",
      "Epoch 5: 0.002755, 0.948542, 0.003073, 0.941583\n",
      "Epoch 6: 0.002464, 0.955271, 0.002754, 0.948417\n",
      "Epoch 7: 0.002224, 0.959479, 0.002517, 0.952333\n",
      "Epoch 8: 0.002024, 0.963167, 0.002389, 0.955167\n",
      "Epoch 9: 0.001856, 0.965938, 0.002220, 0.957667\n",
      "Epoch 10: 0.001708, 0.969375, 0.002075, 0.960417\n",
      "Epoch 11: 0.001579, 0.972063, 0.002036, 0.961250\n",
      "Epoch 12: 0.001461, 0.973750, 0.001927, 0.962333\n",
      "Epoch 13: 0.001361, 0.975708, 0.001817, 0.964750\n",
      "Epoch 14: 0.001275, 0.977417, 0.001772, 0.965750\n",
      "Epoch 15: 0.001191, 0.978958, 0.001724, 0.967500\n",
      "Epoch 16: 0.001119, 0.980187, 0.001683, 0.967583\n",
      "Epoch 17: 0.001050, 0.980979, 0.001652, 0.966667\n",
      "Epoch 18: 0.000990, 0.982396, 0.001617, 0.969500\n",
      "Epoch 19: 0.000934, 0.983708, 0.001575, 0.968833\n",
      "FOLD 2\n",
      "--------------------------------\n",
      "Epoch 0: 0.009375, 0.819292, 0.005410, 0.898333\n",
      "Epoch 1: 0.004712, 0.911396, 0.004667, 0.912500\n",
      "Epoch 2: 0.004008, 0.926000, 0.004026, 0.924583\n",
      "Epoch 3: 0.003463, 0.935750, 0.003574, 0.932583\n",
      "Epoch 4: 0.003031, 0.944667, 0.003239, 0.939500\n",
      "Epoch 5: 0.002688, 0.950438, 0.002881, 0.944583\n",
      "Epoch 6: 0.002420, 0.955521, 0.002714, 0.949667\n",
      "Epoch 7: 0.002185, 0.959667, 0.002512, 0.952333\n",
      "Epoch 8: 0.001993, 0.964021, 0.002397, 0.955417\n",
      "Epoch 9: 0.001830, 0.966292, 0.002206, 0.958083\n",
      "Epoch 10: 0.001688, 0.968979, 0.002094, 0.960667\n",
      "Epoch 11: 0.001557, 0.972083, 0.002014, 0.961417\n",
      "Epoch 12: 0.001447, 0.973917, 0.001925, 0.963833\n",
      "Epoch 13: 0.001343, 0.975938, 0.001857, 0.964083\n",
      "Epoch 14: 0.001263, 0.977792, 0.001788, 0.965333\n",
      "Epoch 15: 0.001183, 0.979000, 0.001727, 0.966000\n",
      "Epoch 16: 0.001113, 0.979437, 0.001720, 0.966167\n",
      "Epoch 17: 0.001042, 0.981396, 0.001690, 0.967750\n",
      "Epoch 18: 0.000978, 0.982458, 0.001640, 0.967500\n",
      "Epoch 19: 0.000925, 0.983833, 0.001622, 0.970000\n",
      "FOLD 3\n",
      "--------------------------------\n",
      "Epoch 0: 0.009367, 0.820646, 0.005405, 0.899750\n",
      "Epoch 1: 0.004686, 0.912792, 0.004815, 0.908750\n",
      "Epoch 2: 0.004005, 0.926063, 0.004197, 0.921333\n",
      "Epoch 3: 0.003493, 0.935208, 0.003803, 0.927417\n",
      "Epoch 4: 0.003055, 0.943813, 0.003332, 0.937583\n",
      "Epoch 5: 0.002698, 0.950354, 0.003063, 0.943083\n",
      "Epoch 6: 0.002416, 0.955958, 0.002811, 0.947583\n",
      "Epoch 7: 0.002168, 0.959812, 0.002635, 0.953250\n",
      "Epoch 8: 0.001962, 0.963792, 0.002509, 0.953250\n",
      "Epoch 9: 0.001791, 0.967250, 0.002454, 0.954417\n",
      "Epoch 10: 0.001642, 0.970229, 0.002230, 0.958250\n",
      "Epoch 11: 0.001518, 0.972333, 0.002135, 0.960667\n",
      "Epoch 12: 0.001400, 0.974729, 0.002077, 0.961333\n",
      "Epoch 13: 0.001305, 0.976646, 0.002024, 0.961750\n",
      "Epoch 14: 0.001216, 0.978187, 0.001974, 0.961583\n",
      "Epoch 15: 0.001137, 0.980271, 0.001846, 0.963917\n",
      "Epoch 16: 0.001066, 0.980917, 0.001811, 0.965333\n",
      "Epoch 17: 0.000996, 0.982229, 0.001769, 0.965917\n",
      "Epoch 18: 0.000935, 0.984042, 0.001744, 0.966333\n",
      "Epoch 19: 0.000887, 0.984458, 0.001696, 0.967083\n",
      "FOLD 4\n",
      "--------------------------------\n",
      "Epoch 0: 0.009619, 0.815917, 0.004916, 0.908000\n",
      "Epoch 1: 0.004795, 0.909771, 0.004168, 0.922583\n",
      "Epoch 2: 0.004073, 0.924375, 0.003591, 0.933167\n",
      "Epoch 3: 0.003519, 0.934979, 0.003245, 0.943083\n",
      "Epoch 4: 0.003093, 0.942104, 0.002855, 0.949417\n",
      "Epoch 5: 0.002733, 0.949229, 0.002608, 0.954167\n",
      "Epoch 6: 0.002457, 0.953396, 0.002460, 0.955083\n",
      "Epoch 7: 0.002215, 0.958521, 0.002237, 0.959583\n",
      "Epoch 8: 0.002015, 0.962500, 0.002093, 0.962083\n",
      "Epoch 9: 0.001851, 0.965625, 0.001965, 0.964583\n",
      "Epoch 10: 0.001705, 0.968229, 0.001867, 0.965583\n",
      "Epoch 11: 0.001571, 0.971000, 0.001809, 0.967333\n",
      "Epoch 12: 0.001460, 0.973146, 0.001723, 0.970250\n",
      "Epoch 13: 0.001361, 0.975125, 0.001685, 0.969000\n",
      "Epoch 14: 0.001271, 0.976896, 0.001603, 0.970333\n",
      "Epoch 15: 0.001190, 0.978896, 0.001537, 0.971667\n",
      "Epoch 16: 0.001116, 0.980146, 0.001514, 0.972167\n",
      "Epoch 17: 0.001054, 0.980979, 0.001478, 0.972667\n",
      "Epoch 18: 0.000993, 0.983021, 0.001433, 0.972500\n",
      "Epoch 19: 0.000937, 0.983854, 0.001430, 0.972917\n"
     ]
    }
   ],
   "source": [
    "for fold, (train_ids, valid_ids) in enumerate(kfold.split(training_data)):\n",
    "\n",
    "    print(f'FOLD {fold}')\n",
    "    print('--------------------------------')\n",
    "\n",
    "    ....\n",
    "    \n",
    "    \n",
    "    results[fold] = train_eval(nepochs, model, lr, trainloader, validloader, cost_fn) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3275d759-f9a9-42ac-93ae-049787404f0b",
   "metadata": {},
   "source": [
    "### Prepare output plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5805a671-30c6-45bb-b250-f75062864164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'accuracy')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "598f6b4c-945e-42b3-8672-d4939748ab05",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
